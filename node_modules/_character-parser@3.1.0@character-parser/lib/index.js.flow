// @flow
// Generated using flowgen2

type TOKEN_TYPESType =
  | 'LINE_COMMENT'
  | 'BLOCK_COMMENT'
  | 'SINGLE_QUOTE'
  | 'DOUBLE_QUOTE'
  | 'TEMPLATE_QUOTE'
  | 'REGEXP'
  | 'ROUND_BRACKET'
  | 'CURLY_BRACKET'
  | 'SQUARE_BRACKET';
declare var TOKEN_TYPES: {
  +LINE_COMMENT: 'LINE_COMMENT',
  +BLOCK_COMMENT: 'BLOCK_COMMENT',
  +SINGLE_QUOTE: 'SINGLE_QUOTE',
  +DOUBLE_QUOTE: 'DOUBLE_QUOTE',
  +TEMPLATE_QUOTE: 'TEMPLATE_QUOTE',
  +REGEXP: 'REGEXP',
  +ROUND_BRACKET: 'ROUND_BRACKET',
  +CURLY_BRACKET: 'CURLY_BRACKET',
  +SQUARE_BRACKET: 'SQUARE_BRACKET',
  +LINE_COMMENT: 'LINE_COMMENT',
  +BLOCK_COMMENT: 'BLOCK_COMMENT',
  +SINGLE_QUOTE: 'SINGLE_QUOTE',
  +DOUBLE_QUOTE: 'DOUBLE_QUOTE',
  +TEMPLATE_QUOTE: 'TEMPLATE_QUOTE',
  +REGEXP: 'REGEXP',
  +ROUND_BRACKET: 'ROUND_BRACKET',
  +CURLY_BRACKET: 'CURLY_BRACKET',
  +SQUARE_BRACKET: 'SQUARE_BRACKET',
};
export type {TOKEN_TYPESType};
export {TOKEN_TYPES};

declare class State {
  stack: Array<TOKEN_TYPESType>;
  regexpStart: boolean;
  escaped: boolean;
  hasDollar: boolean;
  src: string;
  history: string;
  lastChar: string;
  current(): TOKEN_TYPESType;
  isString(): boolean;
  isComment(): boolean;
  isNesting(opts?: {+ignoreLineComment?: boolean}): boolean;
}
export {State};

declare function defaultState(): State;
export {defaultState};

declare function parse(
  src: string,
  state?: State,
  options?: {+start?: number, +end?: number},
): State;
export {parse};

export default parse;

declare function parseUntil(
  src: string,
  delimiter: string | RegExp,
  options?: {
    +start?: number,
    +end?: number,
    +ignoreLineComment?: boolean,
    +ignoreNesting?: boolean,
  },
): {start: number, end: number, src: string};
export {parseUntil};

declare function parseChar(character: string, state?: State): State;
export {parseChar};

declare function isPunctuator(c: string): boolean;
export {isPunctuator};

declare function isKeyword(id: string): boolean;
export {isKeyword};
